{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./PriceConverter.sol\";\n\nerror NotOwner();\n\ncontract FundMe {\n    using PriceConverter for uint;\n    uint public constant MIN_USD = 50 * 1e18;\n\n    address[] public funders;\n    mapping(address => uint) public addressToAmountFunded;\n\n    address public immutable owner;\n\n    AggregatorV3Interface public priceFeed;\n\n    constructor(address priceFeedAddress) {\n        owner = msg.sender;\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    function fund() public payable {\n        require(msg.value.getConversionRate(priceFeed) >= MIN_USD, \"Didn't send enough!!\");\n        funders.push(msg.sender);\n        addressToAmountFunded[msg.sender] = msg.value;    \n    }\n\n    function withdraw() public onlyOwner{\n        // require(msg.sender == owner, \"Sender is not the owner!!\"); // this line has been commented because I will be using a modifier described at the end of this function.\n\n        for(uint funderIndex = 0; funderIndex < funders.length; funderIndex++) {\n            address funder = funders[funderIndex];\n            addressToAmountFunded[funder] = 0;\n        }\n        funders = new address[](0);  // this line is to reset the array. the value in the curly brackets indicate the number of items in the newly created array.\n\n        // // three ways to send money in a smart contract\n        // // 1. transfer\n        // payable(msg.sender).transfer(address(this).balance); // typecasting the msg.sender to a payable address. 'this' refers to the current contract. gives an error and reverts the txn if more than 2300 gas is used, which means that the txn has failed.\n\n        // // 2. send\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance); // here, 'send' returns a boolean value if more than 2300 gas is used. we can use this bool value in a 'require' statement to verify whether the txn was successful or not.\n        // require(sendSuccess, \"Send failed!!\");\n\n        // 3.call --> lower level command\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\"\");  // this function is basically used to call another function. returns two items, hence the comma. returns a callSuccess, and a data object in bytes format.\n        require(callSuccess, \"Call failed!!\");\n    }\n\n\n    // modifiers are basically like middlewares\n    modifier onlyOwner {\n        // require(msg.sender == owner, \"Sender is not the owner\");\n        if(msg.sender != owner)\n            revert NotOwner();\n        _;  // '_' means that carry on with the rest of the function.\n    }\n\n    receive() external payable {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n}"
    },
    "contracts/PriceConverter.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    \n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {\n        (, int256 price, , ,) = priceFeed.latestRoundData();\n        return uint256(price * 1e10);\n    }\n\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed) internal view returns (uint256) {\n        uint ethPrice = getPrice(priceFeed);\n        uint ethAmountInUSD = (ethPrice * ethAmount) / 1e18;\n        return ethAmountInUSD;\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}